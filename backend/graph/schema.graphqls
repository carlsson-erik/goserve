# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Dashboard {
  id: Int!
  name: String!
  rows: Int!
  cols: Int!
  tiles: [Tile!]!
}

input NewDashboard {
  id: Int
  name: String!
  rows: Int
  cols: Int
}

type Template {
  id: Int!
  name: String!
  data: String!
  width: Int!
  height: Int!
  variables: [Variable!]
}

type Variable {
  id: Int!
  name: String!
  value: String!
  default: String
}

input NewVariable {
  id: Int
  name: String!
  value: String
  default: String
  template_id: Int
  tile_id: Int

}

input NewTemplate{
  id : Int
  name: String!
  data: String!
  width: Int
  height: Int
  variables: [NewVariable!]!
}

type Tile {
  id: Int!
  name: String!
  row: Int!
  col: Int!
  width: Int!
  height: Int!
  template: Template!
  variables: [Variable!]!
}

input NewTile {
  id: Int
  name: String!
  row: Int!
  col: Int!
  width: Int!
  height: Int!
  dashboardId: Int
  templateId: Int
  variables: [NewVariable!]!
}



type Mutation {
  createTemplate(input: NewTemplate!): Template!
  updateTemplate(input: NewTemplate!): Template!
  deleteTemplate(id: Int!): Template!
  createDashboard(input: NewDashboard!): Dashboard!
  updateDashboard(input: NewDashboard!): Dashboard!
  deleteDashboard(id: Int!): Dashboard!
  createTile(input: NewTile!): Tile!
  updateTile(input: NewTile!): Tile!
  createOrUpdateTiles(input: [NewTile!]!) : Int!
  deleteTile(id: Int!): Tile!
}

type Query {
  dashboards: [Dashboard!]!
  templates: [Template!]!
}
