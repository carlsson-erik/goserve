package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	. "goserve/.gen/v1/public/table"
	"goserve/graph/model"
	"goserve/service"
	"log"

	"github.com/go-jet/jet/v2/postgres"
)

// Tiles is the resolver for the tiles field.
func (r *dashboardResolver) Tiles(ctx context.Context, obj *model.Dashboard) ([]*model.Tile, error) {
	var res []*model.Tile

	getQuery := Tile.SELECT(Tile.AllColumns).FROM(Tile).WHERE(Tile.DashboardID.EQ(postgres.Int64(int64(obj.ID))))

	err := getQuery.Query(r.DB, &res)

	if err != nil {
		log.Printf("Get tiles for dashboard error: %v", err)
		return nil, err
	}

	return res, err
}

// CreateTemplate is the resolver for the createTemplate field.
func (r *mutationResolver) CreateTemplate(ctx context.Context, input model.NewTemplate) (*model.Template, error) {
	res, err := r.TemplateService.Create(input)

	return res, err
}

// UpdateTemplate is the resolver for the updateTemplate field.
func (r *mutationResolver) UpdateTemplate(ctx context.Context, input model.NewTemplate) (*model.Template, error) {
	res, err := r.TemplateService.Update(input)

	log.Println("Success update template. Next update variables...")

	var variables []*model.Variable

	for _, variable := range input.Variables {
		variable.TemplateID = &res.ID
		res, err := r.VariableService.Update(*variable)

		if err != nil {
			log.Printf("Update variable in template update error: %v", err)
			return nil, err
		}
		variables = append(variables, res)
	}

	res.Variables = variables
	return res, err
}

// DeleteTemplate is the resolver for the deleteTemplate field.
func (r *mutationResolver) DeleteTemplate(ctx context.Context, id int) (*model.Template, error) {
	res, err := r.TemplateService.Delete(id)

	return res, err
}

// CreateDashboard is the resolver for the createDashboard field.
func (r *mutationResolver) CreateDashboard(ctx context.Context, input model.NewDashboard) (*model.Dashboard, error) {
	var rows, cols int
	if input.Rows == nil {
		rows = 4
	} else {
		rows = *input.Rows
	}

	if input.Cols == nil {
		cols = 4
	} else {
		cols = *input.Cols
	}

	newDashboard := model.NewDashboard{
		Name: input.Name,
		Rows: &rows,
		Cols: &cols,
	}

	res, err := r.DashboardService.Create(newDashboard)

	if err != nil {
		log.Printf("Insert error: %v", err)
		return nil, err
	}

	return res, err
}

// UpdateDashboard is the resolver for the updateDashboard field.
func (r *mutationResolver) UpdateDashboard(ctx context.Context, input model.NewDashboard) (*model.Dashboard, error) {
	res, err := r.DashboardService.Update(input)

	return res, err
}

// DeleteDashboard is the resolver for the deleteDashboard field.
func (r *mutationResolver) DeleteDashboard(ctx context.Context, id int) (*model.Dashboard, error) {
	dashboardService := service.DashboardService{DB: r.DB}

	res, err := dashboardService.Delete(id)

	if err != nil {
		log.Printf("Delete failed: %v", err)
		return nil, err
	}

	return res, err
}

// CreateTile is the resolver for the createTile field.
func (r *mutationResolver) CreateTile(ctx context.Context, input model.NewTile) (*model.Tile, error) {
	res, err := r.TileService.Create(input)

	return res, err
}

// UpdateTile is the resolver for the updateTile field.
func (r *mutationResolver) UpdateTile(ctx context.Context, input model.NewTile) (*model.Tile, error) {
	res, err := r.TileService.Update(input)

	return res, err
}

// DeleteTile is the resolver for the deleteTile field.
func (r *mutationResolver) DeleteTile(ctx context.Context, id int) (*model.Tile, error) {
	res, err := r.TileService.Delete(id)

	if err != nil {
		log.Printf("Delete failed: %v", err)
		return nil, err
	}

	return res, err
}
func (r *mutationResolver) CreateOrUpdateTiles(ctx context.Context, data []*model.NewTile) (int, error) {
	for _, tileDataPointer := range data {

		tileData := *tileDataPointer

		if tileData.ID == nil {
			r.TileService.Create(tileData)
		} else {
			r.TileService.Update(tileData)
		}

	}
	return 1, nil
}

// Dashboards is the resolver for the dashboards field.
func (r *queryResolver) Dashboards(ctx context.Context) ([]*model.Dashboard, error) {
	res, err := r.DashboardService.All()

	if err != nil {
		log.Printf("Get Dashboards error: %v", err)
		return nil, err
	}

	return res, err
}

// Templates is the resolver for the templates field.
func (r *queryResolver) Templates(ctx context.Context) ([]*model.Template, error) {
	res, err := r.TemplateService.All()

	return res, err
}

// Variables is the resolver for the variables field.
func (r *templateResolver) Variables(ctx context.Context, obj *model.Template) ([]*model.Variable, error) {
	var res []*model.Variable

	getVariables := Variable.SELECT(Variable.AllColumns).WHERE(Variable.TemplateID.EQ(postgres.Int64(int64(obj.ID))))

	err := getVariables.Query(r.DB, &res)

	if err != nil {
		log.Printf("Get variables for template error: %v", err)
		return nil, err
	}

	return res, err
}

// Template is the resolver for the template field.
func (r *tileResolver) Template(ctx context.Context, obj *model.Tile) (*model.Template, error) {
	var res model.Template

	getQuery := Tile.INNER_JOIN(Template, Template.ID.EQ(Tile.TemplateID)).SELECT(Template.AllColumns).WHERE(Tile.ID.EQ(postgres.Int64(int64(obj.ID))))

	err := getQuery.Query(r.DB, &res)

	if err != nil {
		log.Printf("Get template for tile error: %v", err)
		return nil, err
	}

	return &res, err
}

// Variables is the resolver for the variables field.
func (r *tileResolver) Variables(ctx context.Context, obj *model.Tile) ([]*model.Variable, error) {
	var res []*model.Variable

	fmt.Print("variables for tile")

	getQuery := Variable.SELECT(Variable.AllColumns).WHERE(Variable.TileID.EQ(postgres.Int(int64(obj.ID))))

	err := getQuery.Query(r.DB, &res)

	if err != nil {
		log.Printf("Get variables for tile error: %v", err)
		return nil, err
	}

	return res, err
}

// Dashboard returns DashboardResolver implementation.
func (r *Resolver) Dashboard() DashboardResolver { return &dashboardResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Template returns TemplateResolver implementation.
func (r *Resolver) Template() TemplateResolver { return &templateResolver{r} }

// Tile returns TileResolver implementation.
func (r *Resolver) Tile() TileResolver { return &tileResolver{r} }

type dashboardResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type templateResolver struct{ *Resolver }
type tileResolver struct{ *Resolver }
