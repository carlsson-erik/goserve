package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	. "goserve/.gen/v1/public/table"
	"goserve/db"
	"goserve/graph/model"
	"log"

	"github.com/go-jet/jet/v2/postgres"
)

// Tiles is the resolver for the tiles field.
func (r *dashboardResolver) Tiles(ctx context.Context, obj *model.Dashboard) ([]*model.Tile, error) {
	var res []*model.Tile

	getQuery := postgres.SELECT(Tile.AllColumns).FROM(Tile).WHERE(Tile.DashboardID.EQ(postgres.Int64(int64(obj.ID))))

	err := getQuery.Query(r.DB, &res)

	return res, err
}

// CreateTemplate is the resolver for the createTemplate field.
func (r *mutationResolver) CreateTemplate(ctx context.Context, input model.NewTemplate) (*model.Template, error) {
	newTemplate := model.Template{
		Name:   input.Name,
		Width:  *input.Width,
		Height: *input.Height,
		Data:   input.Data,
	}
	insertQuery := Template.INSERT(Template.Name, Template.Width, Template.Height, Template.Data).MODEL(newTemplate).RETURNING(Template.AllColumns)

	templateRes := model.Template{}

	err := insertQuery.Query(r.DB, &templateRes)

	if err != nil {
		log.Printf("Insert error: %v", err)
		return nil, err
	}

	var variablesInsertRes []*model.Variable

	newVariables := []model.NewVariable{}

	for _, variable := range input.Variables {
		newVariables = append(newVariables, model.NewVariable{Name: variable.Name, Default: variable.Default, Value: variable.Value, TemplateID: &templateRes.ID, TileID: nil})
	}
	fmt.Printf("%d", len(newVariables))

	insertVariableQuery := Variable.INSERT(Variable.Name, Variable.Default, Variable.Value, Variable.TemplateID, Variable.TileID).MODELS(newVariables)

	err = insertVariableQuery.Query(r.DB, &variablesInsertRes)

	if err != nil {
		log.Printf("Insert variables error: %v", err)
		return nil, err
	}

	var variablesGetRes []*model.Variable

	getVariablesQuery := postgres.SELECT(Variable.AllColumns).FROM(Variable).WHERE(Variable.TemplateID.EQ(postgres.Int64(int64(templateRes.ID))))

	err = getVariablesQuery.Query(r.DB, &variablesGetRes)

	if err != nil {
		log.Printf("Get variables error: %v", err)
		return nil, err
	}

	templateRes.Variables = variablesGetRes

	return &templateRes, err
}

// CreateDashboard is the resolver for the createDashboard field.
func (r *mutationResolver) CreateDashboard(ctx context.Context, input model.NewDashboard) (*model.Dashboard, error) {

	var rows, cols int
	if input.Rows == nil {
		rows = 4
	} else {
		rows = *input.Rows
	}

	if input.Cols == nil {
		cols = 4
	} else {
		cols = *input.Cols
	}

	newDashboard := model.NewDashboard{
		Name: input.Name,
		Rows: &rows,
		Cols: &cols,
	}

	dashboardService := db.DashboardService{DB: r.DB}

	res, err := dashboardService.Create(&newDashboard)

	if err != nil {
		log.Printf("Insert error: %v", err)
		return nil, err
	}

	return res, err
}

// DeleteDashboard is the resolver for the deleteDashboard field.
func (r *mutationResolver) DeleteDashboard(ctx context.Context, id int) (*model.Dashboard, error) {
	deleteQuery := Dashboard.DELETE().WHERE(Dashboard.ID.EQ(postgres.Int(int64(id)))).RETURNING(Dashboard.AllColumns)

	res := model.Dashboard{}

	err := deleteQuery.Query(r.DB, &res)

	if err != nil {
		log.Printf("Delete failed: %v", err)
		return nil, err
	}

	return &res, err
}

// CreateTile is the resolver for the createTile field.
func (r *mutationResolver) CreateTile(ctx context.Context, input model.NewTile) (*model.Tile, error) {
	newTile := model.NewTile{
		Name:        input.Name,
		DashboardID: input.DashboardID,
		TemplateID:  input.TemplateID,
		Row:         input.Row,
		Col:         input.Col,
		Width:       input.Width,
		Height:      input.Height,
	}
	insertQuery := Tile.INSERT(Tile.Name, Tile.DashboardID, Tile.TemplateID, Tile.Row, Tile.Col, Tile.Width, Tile.Height).MODEL(newTile).RETURNING(Tile.AllColumns)

	tileRes := model.Tile{}

	err := insertQuery.Query(r.DB, &tileRes)

	if err != nil {
		log.Printf("Insert failed: %v", err)
		return nil, err
	}

	var variablesInsertRes []*model.Variable

	newVariables := []model.NewVariable{}

	for _, variable := range input.Variables {
		newVariables = append(newVariables, model.NewVariable{Name: variable.Name, Default: variable.Default, Value: variable.Value, TileID: &tileRes.ID})
	}
	fmt.Printf("%d", len(newVariables))

	insertVariableQuery := Variable.INSERT(Variable.Name, Variable.Default, Variable.Value, Variable.TileID).MODELS(newVariables)

	err = insertVariableQuery.Query(r.DB, &variablesInsertRes)

	if err != nil {
		log.Printf("Insert variables error: %v", err)
		return nil, err
	}

	var variablesGetRes []*model.Variable

	getVariablesQuery := postgres.SELECT(Variable.AllColumns).FROM(Variable).WHERE(Variable.TemplateID.EQ(postgres.Int64(int64(tileRes.ID))))

	err = getVariablesQuery.Query(r.DB, &variablesGetRes)

	if err != nil {
		log.Printf("Get variables error: %v", err)
		return nil, err
	}

	tileRes.Variables = variablesGetRes

	return &tileRes, err
}

// DeleteTile is the resolver for the deleteTile field.
func (r *mutationResolver) DeleteTile(ctx context.Context, id int) (*model.Tile, error) {
	deleteQuery := Tile.DELETE().WHERE(Tile.ID.EQ(postgres.Int(int64(id)))).RETURNING(Tile.AllColumns)

	res := model.Tile{}

	err := deleteQuery.Query(r.DB, &res)

	if err != nil {
		log.Printf("Delete failed: %v", err)
		return nil, err
	}

	return &res, err
}

// Dashboards is the resolver for the dashboards field.
func (r *queryResolver) Dashboards(ctx context.Context) ([]*model.Dashboard, error) {

	dashboardService := db.DashboardService{DB: r.DB}

	return dashboardService.All()
}

// Dashboard is the resolver for the dashboard field.
func (r *queryResolver) Dashboard(ctx context.Context, id int) (*model.Dashboard, error) {
	var res *model.Dashboard

	getQuery := postgres.SELECT(Dashboard.AllColumns).FROM(Dashboard).WHERE(Dashboard.ID.EQ(postgres.Int(int64(id))))

	err := getQuery.Query(r.DB, &res)

	return res, err
}

// Tiles is the resolver for the tiles field.
func (r *queryResolver) Tiles(ctx context.Context) ([]*model.Tile, error) {
	var res []*model.Tile

	getQuery := postgres.SELECT(Tile.AllColumns).FROM(Tile)

	err := getQuery.Query(r.DB, &res)

	return res, err
}

// Tile is the resolver for the tile field.
func (r *queryResolver) Tile(ctx context.Context, id int) (*model.Tile, error) {
	var res *model.Tile

	getQuery := postgres.SELECT(Tile.AllColumns).FROM(Tile).WHERE(Tile.ID.EQ(postgres.Int(int64(id))))

	err := getQuery.Query(r.DB, &res)

	return res, err
}

// Templates is the resolver for the templates field.
func (r *queryResolver) Templates(ctx context.Context) ([]*model.Template, error) {
	var res []*model.Template

	getQuery := Template.SELECT(Template.AllColumns)

	err := getQuery.Query(r.DB, &res)

	return res, err
}

// Variables is the resolver for the variables field.
func (r *templateResolver) Variables(ctx context.Context, obj *model.Template) ([]*model.Variable, error) {
	var res []*model.Variable

	getVariables := Variable.SELECT(Variable.AllColumns).WHERE(Variable.TemplateID.EQ(postgres.Int64(int64(obj.ID))))

	err := getVariables.Query(r.DB, &res)

	return res, err
}

// Dashboard is the resolver for the dashboard field.
func (r *tileResolver) Dashboard(ctx context.Context, obj *model.Tile) (*model.Dashboard, error) {
	var res model.Dashboard

	getQuery := postgres.SELECT(Dashboard.AllColumns).FROM(Dashboard).WHERE(Dashboard.ID.EQ(postgres.Int(int64(obj.ID))))

	err := getQuery.Query(r.DB, &res)

	return &res, err
}

// Template is the resolver for the template field.
func (r *tileResolver) Template(ctx context.Context, obj *model.Tile) (*model.Template, error) {
	var res model.Template

	getQuery := Template.SELECT(Template.AllColumns).WHERE(Template.ID.EQ(postgres.Int(int64(obj.ID))))

	err := getQuery.Query(r.DB, &res)

	return &res, err
}

// Variables is the resolver for the variables field.
func (r *tileResolver) Variables(ctx context.Context, obj *model.Tile) ([]*model.Variable, error) {
	var res []*model.Variable

	getQuery := Variable.SELECT(Variable.AllColumns).WHERE(Variable.TileID.EQ(postgres.Int(int64(obj.ID))))

	err := getQuery.Query(r.DB, &res)

	return res, err
}

// Dashboard returns DashboardResolver implementation.
func (r *Resolver) Dashboard() DashboardResolver { return &dashboardResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Template returns TemplateResolver implementation.
func (r *Resolver) Template() TemplateResolver { return &templateResolver{r} }

// Tile returns TileResolver implementation.
func (r *Resolver) Tile() TileResolver { return &tileResolver{r} }

type dashboardResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type templateResolver struct{ *Resolver }
type tileResolver struct{ *Resolver }
