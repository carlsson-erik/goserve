//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Dashboard = newDashboardTable("public", "dashboard", "")

type dashboardTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Rows        postgres.ColumnInteger
	Cols        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DashboardTable struct {
	dashboardTable

	EXCLUDED dashboardTable
}

// AS creates new DashboardTable with assigned alias
func (a DashboardTable) AS(alias string) *DashboardTable {
	return newDashboardTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DashboardTable with assigned schema name
func (a DashboardTable) FromSchema(schemaName string) *DashboardTable {
	return newDashboardTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DashboardTable with assigned table prefix
func (a DashboardTable) WithPrefix(prefix string) *DashboardTable {
	return newDashboardTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DashboardTable with assigned table suffix
func (a DashboardTable) WithSuffix(suffix string) *DashboardTable {
	return newDashboardTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDashboardTable(schemaName, tableName, alias string) *DashboardTable {
	return &DashboardTable{
		dashboardTable: newDashboardTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newDashboardTableImpl("", "excluded", ""),
	}
}

func newDashboardTableImpl(schemaName, tableName, alias string) dashboardTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		RowsColumn        = postgres.IntegerColumn("rows")
		ColsColumn        = postgres.IntegerColumn("cols")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, RowsColumn, ColsColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, DescriptionColumn, RowsColumn, ColsColumn}
	)

	return dashboardTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Rows:        RowsColumn,
		Cols:        ColsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
