//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Template = newTemplateTable("public", "template", "")

type templateTable struct {
	postgres.Table

	// Columns
	ID     postgres.ColumnInteger
	Name   postgres.ColumnString
	Data   postgres.ColumnString
	Width  postgres.ColumnInteger
	Height postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TemplateTable struct {
	templateTable

	EXCLUDED templateTable
}

// AS creates new TemplateTable with assigned alias
func (a TemplateTable) AS(alias string) *TemplateTable {
	return newTemplateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TemplateTable with assigned schema name
func (a TemplateTable) FromSchema(schemaName string) *TemplateTable {
	return newTemplateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TemplateTable with assigned table prefix
func (a TemplateTable) WithPrefix(prefix string) *TemplateTable {
	return newTemplateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TemplateTable with assigned table suffix
func (a TemplateTable) WithSuffix(suffix string) *TemplateTable {
	return newTemplateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTemplateTable(schemaName, tableName, alias string) *TemplateTable {
	return &TemplateTable{
		templateTable: newTemplateTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newTemplateTableImpl("", "excluded", ""),
	}
}

func newTemplateTableImpl(schemaName, tableName, alias string) templateTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		DataColumn     = postgres.StringColumn("data")
		WidthColumn    = postgres.IntegerColumn("width")
		HeightColumn   = postgres.IntegerColumn("height")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, DataColumn, WidthColumn, HeightColumn}
		mutableColumns = postgres.ColumnList{NameColumn, DataColumn, WidthColumn, HeightColumn}
	)

	return templateTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Name:   NameColumn,
		Data:   DataColumn,
		Width:  WidthColumn,
		Height: HeightColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
